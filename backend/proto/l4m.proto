syntax = "proto3";

package l4m;

// -----------------------------------------------------------------------------
// Enum for kinds of objects.
// -----------------------------------------------------------------------------
enum ObjectKind {
  // Default or unspecified kind.
  OBJECT_KIND_UNSPECIFIED = 0;

  // Key-value block.
  OBJECT_KIND_KV_BLOCK = 1;

  // Embedding.
  OBJECT_KIND_EMB = 2;

  // Distribution.
  OBJECT_KIND_ADAPTER = 3;
}

// -----------------------------------------------------------------------------
// Allocate and Deallocate messages.
// -----------------------------------------------------------------------------

message Allocate {
  // The kind of object to allocate.
  ObjectKind kind = 1;
  // The number of objects to allocate.
  uint32 object_id_offset = 2;
  uint32 count = 3;
}

// A request to allocate objects of a certain kind with specified IDs.
message BatchAllocate {
  repeated Allocate items = 1;
}

message Deallocate {
  // The kind of object to deallocate.
  ObjectKind kind = 1;
  // The number of objects to deallocate.
  uint32 object_id_offset = 2;
  uint32 count = 3;
}

// A request to deallocate objects of a certain kind with specified IDs.
message BatchDeallocate {
  repeated Deallocate items = 1;
}

// -----------------------------------------------------------------------------
// Embedding messages.
// -----------------------------------------------------------------------------

message EmbedText {
  // Embedding IDs to produce/associate with this text.
  uint32 embedding_id = 1;
  // The token IDs for the text to be embedded.
  uint32 token_id = 2;
  // The position IDs corresponding to each token.
  uint32 position_id = 3;
}

// A request to generate text embeddings.
message BatchEmbedText {
  // Embedding IDs to produce/associate with this text.
  repeated EmbedText items = 1;
}

// -----------------------------------------------------------------------------
// Block fill, mask, and copy messages.
// -----------------------------------------------------------------------------

// A single block fill specification.
message FillBlock {
  // The ID of the block to fill.
  uint32 last_block_len = 1;
  // IDs of blocks providing context for the fill operation.
  repeated uint32 context_block_ids = 2;
  // Input embeddings that seed the fill.
  repeated uint32 input_embedding_ids = 3;
  // Output embeddings produced by the fill.
  repeated uint32 output_embedding_ids = 4;
}



// A request to fill one or more blocks.
message BatchFillBlock {
  // A batch of block fill items.
  repeated FillBlock items = 1;
}

message BrleBuffer {
  repeated uint32 buffer = 1;
}


message ForwardText {
  repeated uint32 kv_page_ids = 1;

  uint32 kv_page_last_len = 2;

  repeated uint32 token_ids = 3;

  repeated uint32 position_ids = 4;

  repeated BrleBuffer mask = 5;

  repeated uint32 output_indices = 6;
}

message BatchForwardText {
  // A batch of forward text items.
  repeated ForwardText items = 1;
}

// A single mask specification for a block.
message MaskBlock {
  // The ID of the block being masked.
  uint32 block_id = 1;
  // A flattened 2D mask (row-major order) represented as booleans.
  repeated bool mask = 2;
}

// A request to apply one or more boolean masks to blocks.
message BatchMaskBlock {
  // A batch of block mask items.
  repeated MaskBlock items = 1;
}

// A single copy specification for data between blocks.
message CopyBlock {
  // The source block ID.
  uint32 source_block_id = 1;
  // The destination block ID.
  uint32 destination_block_id = 2;
  // The starting position in the source block.
  uint32 source_start = 3;
  // The starting position in the destination block.
  uint32 destination_start = 4;
  // The number of elements to copy.
  uint32 length = 5;
}

// A request to copy data between blocks.
message BatchCopyBlock {
  // A batch of block copy items.
  repeated CopyBlock items = 1;
}

// -----------------------------------------------------------------------------
// Decode request/response messages.
// -----------------------------------------------------------------------------

message DecodeTokenDistribution {
  // The embedding ID to decode.
  uint32 embedding_id = 1;
  uint32 distribution_id = 2;
}

// A request to decode a sequence of embeddings into tokens.
message BatchDecodeTokenDistribution {

  // The embedding IDs to decode.
  repeated DecodeTokenDistribution items = 1;
}

message SampleTopKRequest {
  // The distribution to sample from.
  uint32 distribution_id = 1;
  // The number of samples to draw.
  uint32 k = 2;
}

message BatchSampleTopKRequest {
  // The sampling request items.
  repeated SampleTopKRequest items = 1;
}

message DebugQueryRequest {
  string query = 1;
}

message BatchDebugQueryRequest {
  // A batch of debug query requests.
  repeated DebugQueryRequest items = 1;
}

message InitializeAdapter {
  uint32 adapter = 1;
  uint32 rank = 2;
  float alpha = 3;
  uint32 population_size = 4;
  float mu_fraction = 5;
  float initial_sigma = 6;
}


message UpdateAdapter {
  uint32 adapter = 1;
  repeated float scores = 2;
  repeated int64 seeds = 3;
  float max_sigma = 4;
}

message ForwardWithAdapter {
  uint32 adapter = 1;

  int64 seed = 2;

  repeated uint32 kv_page_ids = 3;

  uint32 kv_page_last_len = 4;

  repeated uint32 token_ids = 5;

  repeated uint32 position_ids = 6;

  repeated BrleBuffer mask = 7;

  repeated uint32 output_indices = 8;

}

message BatchForwardWithAdapter {
  repeated ForwardWithAdapter items = 1;
}

// The response containing decoded tokens.
message SampleTopKResponse {
  // The decoded token IDs.
  repeated uint32 token_ids = 1;
  repeated float probabilities = 2;
}

message BatchSampleTopKResponse {
  // The response items.
  repeated SampleTopKResponse items = 1;
}


message GetInfoRequest {

}

message GetInfoResponse {
  string version = 1;
  string model_name = 2;
  uint32 kv_page_size = 3;
  uint32 num_available_kv_pages = 4;
  uint32 num_available_embeddings = 5;
  uint32 num_available_adapters = 6;
  Tokenizer tokenizer = 7;
}

message BatchSyncResponse {

}

message Distribution {
  repeated uint32 ids = 1;
  repeated float probs = 2;
}


message ForwardTextResponse {
  repeated Distribution distributions = 1;
}

message BatchForwardTextResponse {
  // A batch of forward text responses.
  repeated ForwardTextResponse items = 1;
}

message DebugQueryResponse {
  // The response to the debug query.
  string response = 1;
}

message BatchDebugQueryResponse {
  // A batch of debug query responses.
  repeated DebugQueryResponse items = 1;
}




message Tokenizer {
  map<uint32, bytes> merge_table = 1;
  map<string, uint32> special_tokens = 2;
  string split_regex = 3;
  bool escape_non_printable = 4;
}

// -----------------------------------------------------------------------------

message Request {
  uint32 correlation_id = 1;

  oneof command {
    BatchAllocate allocate = 2;
    BatchDeallocate deallocate = 3;
    BatchEmbedText embed_text = 4;
    BatchFillBlock fill_block = 5;
    BatchForwardText forward_text = 6;
    BatchMaskBlock mask_block = 7;
    BatchCopyBlock copy_block = 8;
    BatchDecodeTokenDistribution decode_token_distribution = 9;
    BatchSampleTopKRequest sample_top_k_request = 10;
    BatchDebugQueryRequest debug_query_request = 11;
    InitializeAdapter initialize_adapter = 12;
    UpdateAdapter update_adapter = 13;
    BatchForwardWithAdapter forward_with_adapter = 14;
    GetInfoRequest get_info = 15;
  }
}

message Response {
  uint32 correlation_id = 1;

  oneof command {
    BatchSampleTopKResponse sample_top_k = 2;
    GetInfoResponse get_info = 3;
    BatchSyncResponse batch_sync = 4;
    BatchForwardTextResponse forward_text = 5;
    BatchDebugQueryResponse debug_query = 6;
  }
}